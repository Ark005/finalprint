# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user www-data;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 4096;
}

http {

# DEFAULT
#    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                     '$status $body_bytes_sent "$http_referer" '
#                      '"$http_user_agent" "$http_x_forwarded_for"';


####WEBSOCKET

# map $http_upgrade $connection_upgrade {
#         default upgrade;
#         '' close;
#     }



    log_format  main    '$connection :: $remote_addr :: $remote_user :: [$time_local] :: "$host" :: "$request" :: '
                        '$status :: $body_bytes_sent :: "$http_referer" :: "$http_user_agent" :: '
                        '"$http_x_forwarded_for" :: $request_time :: $upstream_response_time :: $upstream_header_time';


    log_format  compression     '$remote_addr - $remote_user [$time_local] '
                                '"$request" $status $body_bytes_sent '
                                '"$http_referer" "$http_user_agent" "$gzip_ratio"';


    access_log  /var/log/nginx/access.log  main;


### SSL
    ssl_session_cache			shared:SSL:20m;
    ssl_session_timeout			20m;
    ssl_verify_client			off;
    ssl_protocols			TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers				'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers 		on;
#    add_header				Strict-Transport-Security "max-age=3600"; #604800 - неделя
    ssl_buffer_size			4k; # 16k



#### ОБРАБОТКА ЗАПРОСОВ
    sendfile            on;
    # Будет отправлять заголовки и и начало файла в одном пакете
    tcp_nopush          on;
    tcp_nodelay         on;
    # Будет ждать 45 секунд перед закрытием keepalive соединения
    keepalive_timeout   45;
    types_hash_max_size 4096;	
    server_names_hash_bucket_size   512;

#### КЕШИРОВАНИЕ ИНФОРМАЦИИ О ФАЙЛАХ
    # Определяет максимальное количество файлов, информация о которых будет содержаться в кеше
    open_file_cache max=200000 inactive=20s;
    # Определяет через какое время информация будет удалена из кеша
    open_file_cache_valid 30s;
    # Будет кешировать информацию о тех файлах, которые были использованы хотя бы 3 раза
    open_file_cache_min_uses 3;
    # Будет кешировать информацию об отсутствующих файлах
    open_file_cache_errors on;

     
##### ЗАЩИТА ОТ СРЫВА СТЕКА
    # Максимальный размер тела запроса клиента, прописанный в поле Content-Length заголовка. Если сервер должен поддерживать загрузку файлов, это значение необходимо увеличить
    client_max_body_size            10M;
    # Это заставит nginx скрывать информацию о типе и версии Web-сервера на страницах, генерируемых в ответ на ошибочный запрос клиента.
    server_tokens                   off;
    # Максимальный размер буфера для хранения заголовков запроса клиента
    client_header_buffer_size       128k;    
    # закрывает соединения для не отвечающих клиентов. Это позволит высвободить всю память, связанную с клиентом.
    reset_timedout_connection       on;
    # Таймаут при чтении тела запроса клиента
    client_body_timeout             50;
    # Таймаут при чтении заголовка запроса клиента
    client_header_timeout           50;
    # Таймаут при передаче ответа клиенту
    send_timeout                    50;

##### ЗАЩИТА ОТ Dos-атак (КОНТРОЛЬ ЗА КОЛИЧЕСТВОМ ОДНОВРЕМЕННЫХ СОЕДИНЕНИЙ)
    # Описываем зону (slimits), в которой будут храниться состояния сессий. Зона размером 1 Мб может хранить около 32000 состояний, мы устанавливаем ее размер равным 5 Мб
    #     limit_zone slimits $binary_remote_addr 5m; 
    # Задаем максимальное количество одновременных соединений для одной сессии. По сути, это число задает максимальное количество соединений с одного IP
    #    limit_conn slimits 40;
 

#### НАСТРОЙКА PROXY
    # Максимальное время ожидания соединенияс проксируемым сервером
    proxy_connect_timeout 15s;
    proxy_buffers 8 64k; 
    proxy_busy_buffers_size 64k;
    proxy_temp_file_write_size 64k;
    proxy_ssl_server_name on;
   
    # Сколько времени может пройти между двумя последовательными операциями чтения данных от проксируемого сервера, прежде
    # чем соединение будет закрыто. Значение следует увеличить, если проксируемый сервер обрабатывает запросы медленно
    proxy_read_timeout 10s;
    # Сколько времени может пройти между двумя последовательными операциями записи данных на проксируемый сервер, прежде чем соединение будет закрыто
    proxy_send_timeout 10s;

#### СЖАТИЕ Gzip
    
    gzip                                on;
    gzip_min_length                     100;
    gzip_proxied                        any;
    gzip_http_version                   1.1;
    gzip_comp_level                     3; 
#    gzip_static                        off;
    gzip_types                          text/plain text/css application/xml application/javascript text/javascript application/json image/png font/woff2 image/svg+xml;
    gzip_disable                        "msie6";


    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;


    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/conf.d/*/*.conf;
    include /etc/nginx/default.d/*/*.conf;

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers PROFILE=SYSTEM;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }

}

